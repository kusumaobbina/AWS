AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Lambda execution role with permissions for DynamoDB, S3, and CloudWatch Logs'

Resources:
  # DynamoDB Table
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: http-crud-tutorial-items-v2
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaDynamoDBExecutionRolev2
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                Resource: !GetAtt DynamoDBTable.Arn

              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"

  # S3 Bucket for Web Hosting
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: http-crud-web-hosting-v2
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  # Lambda Function
  CRUDLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: http-crud-tutorial-function-v2
      Handler: index.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          from decimal import Decimal

          dynamodb = boto3.resource("dynamodb")
          table_name = os.environ['TABLE_NAME']
          table = dynamodb.Table(table_name)

          def lambda_handler(event, context):
              body = {}
              statusCode = 200
              try:
                  if event['routeKey'] == "DELETE /items/{id}":
                      table.delete_item(Key={'id': event['pathParameters']['id']})
                      body = {'message': 'Deleted item', 'id': event['pathParameters']['id']}
                  elif event['routeKey'] == "GET /items/{id}":
                      result = table.get_item(Key={'id': event['pathParameters']['id']})
                      body = result.get("Item", {})
                  elif event['routeKey'] == "GET /items":
                      items = table.scan().get("Items", [])
                      body = [{'id': item['id'], 'name': item['name'], 'price': float(item['price'])} for item in items]
                  elif event['routeKey'] == "PUT /items":
                      requestJSON = json.loads(event['body'])
                      table.put_item(
                          Item={
                              'id': requestJSON['id'],
                              'price': Decimal(str(requestJSON['price'])),
                              'name': requestJSON['name']
                          })
                      body = {'message': 'Item inserted', 'id': requestJSON['id']}
                  else:
                      statusCode = 400
                      body = {'error': 'Unsupported route'}
              except Exception as e:
                  statusCode = 500
                  body = {'error': str(e)}

              return {
                  "statusCode": statusCode,
                  "headers": {"Content-Type": "application/json"},
                  "body": json.dumps(body)
              }
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTable
          S3_BUCKET_NAME: !Ref S3Bucket

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: MyHTTPAPIV2
      ProtocolType: HTTP

  # API Integration
  ApiGatewayIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt CRUDLambdaFunction.Arn
      PayloadFormatVersion: '2.0'

  # API Routes
  ApiGatewayRoutes:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'ANY /items/{id}'
      Target: !Sub 'integrations/${ApiGatewayIntegration}'

  # API Stage
  ApiGatewayStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGateway
      StageName: "$default"
      AutoDeploy: true

  # Lambda Invoke Permission
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CRUDLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*"

Outputs:
  ApiEndpoint:
    Description: "API Gateway Endpoint URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com"
  S3BucketURL:
    Description: "S3 Bucket Website URL"
    Value: !Sub "http://${S3Bucket}.s3-website-${AWS::Region}.amazonaws.com"
