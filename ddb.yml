AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create a DynamoDB table, Lambda function, and API Gateway

Resources:
  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: http-crud-tutorial-items
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: http-crud-tutorial-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: LambdaDynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:DeleteItem'
                Resource: !GetAtt DynamoDBTable.Arn
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'

  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: http-crud-tutorial-function
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          from boto3.dynamodb.conditions import Key

          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('http-crud-tutorial-items')

          def lambda_handler(event, context):
              try:
                  if event['httpMethod'] == 'GET' and 'id' in event['pathParameters']:
                      response = table.get_item(Key={'id': event['pathParameters']['id']})
                      return {'statusCode': 200, 'body': json.dumps(response.get('Item', {}))}
                  elif event['httpMethod'] == 'GET':
                      response = table.scan()
                      return {'statusCode': 200, 'body': json.dumps(response.get('Items', []))}
                  elif event['httpMethod'] == 'PUT':
                      item = json.loads(event['body'])
                      table.put_item(Item=item)
                      return {'statusCode': 200, 'body': json.dumps({'message': 'Item added'})}
                  elif event['httpMethod'] == 'DELETE':
                      table.delete_item(Key={'id': event['pathParameters']['id']})
                      return {'statusCode': 200, 'body': json.dumps({'message': 'Item deleted'})}
                  else:
                      return {'statusCode': 400, 'body': json.dumps({'message': 'Invalid request'})}
              except Exception as e:
                  return {'statusCode': 500, 'body': json.dumps({'error': str(e)})}
      Timeout: 10

  ApiGateway:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      Name: http-crud-tutorial-api
      ProtocolType: HTTP

  ApiGatewayStage:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      ApiId: !Ref ApiGateway
      StageName: '$default'
      AutoDeploy: true

  ApiGatewayIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt LambdaFunction.Arn
      PayloadFormatVersion: '2.0'

  ApiGatewayRoutes:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: "ANY /items/{id}"
      Target: !Sub "integrations/${ApiGatewayIntegration}"

Outputs:
  DynamoDBTable:
    Description: Name of the DynamoDB table
    Value: !Ref DynamoDBTable
  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref LambdaFunction
  ApiGatewayInvokeURL:
    Description: Invoke URL for API Gateway
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com"
