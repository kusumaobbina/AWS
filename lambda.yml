AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for a CRUD HTTP API with a single Lambda function, API Gateway, and DynamoDB'

Resources:
  # DynamoDB Table
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: http-crud-tutorial-items
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaDynamoDBExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                Resource: !GetAtt DynamoDBTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

  # Single Lambda Function Handling All API Requests
  CRUDLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: http-crud-tutorial-function
      Handler: index.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |


                import json
                import boto3
                from decimal import Decimal

                client = boto3.client('dynamodb')
                dynamodb = boto3.resource("dynamodb")
                table = dynamodb.Table('http-crud-tutorial-items')
                tableName = 'http-crud-tutorial-items'


                def lambda_handler(event, context):
                    print(event)
                    body = {}
                    statusCode = 200
                    headers = {
                        "Content-Type": "application/json"
                    }

                    try:
                        if event['routeKey'] == "DELETE /items/{id}":
                            table.delete_item(
                                Key={'id': event['pathParameters']['id']})
                            body = 'Deleted item ' + event['pathParameters']['id']
                        elif event['routeKey'] == "GET /items/{id}":
                            body = table.get_item(
                                Key={'id': event['pathParameters']['id']})
                            body = body["Item"]
                            responseBody = [
                                {'price': float(body['price']), 'id': body['id'], 'name': body['name']}]
                            body = responseBody
                        elif event['routeKey'] == "GET /items":
                            body = table.scan()
                            body = body["Items"]
                            print("ITEMS----")
                            print(body)
                            responseBody = []
                            for items in body:
                                responseItems = [
                                    {'price': float(items['price']), 'id': items['id'], 'name': items['name']}]
                                responseBody.append(responseItems)
                            body = responseBody
                        elif event['routeKey'] == "PUT /items":
                            requestJSON = json.loads(event['body'])
                            table.put_item(
                                Item={
                                    'id': requestJSON['id'],
                                    'price': Decimal(str(requestJSON['price'])),
                                    'name': requestJSON['name']
                                })
                            body = 'Put item ' + requestJSON['id']
                    except KeyError:
                        statusCode = 400
                        body = 'Unsupported route: ' + event['routeKey']
                    body = json.dumps(body)
                    res = {
                        "statusCode": statusCode,
                        "headers": {
                            "Content-Type": "application/json"
                        },
                        "body": body
                    }
                    return res
                
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTable

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: MyHTTPAPI
      ProtocolType: HTTP

  # API Default Stage
  ApiGatewayStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGateway
      StageName: "$default"
      AutoDeploy: true

  # API Routes
  ApiGatewayGetItemRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'GET /items/{id}'
      Target: !Sub 'integrations/${ApiGatewayIntegration}'

  ApiGatewayGetAllItemsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'GET /items'
      Target: !Sub 'integrations/${ApiGatewayIntegration}'

  ApiGatewayPutRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'PUT /items'
      Target: !Sub 'integrations/${ApiGatewayIntegration}'

  ApiGatewayDeleteRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'DELETE /items/{id}'
      Target: !Sub 'integrations/${ApiGatewayIntegration}'

  # API Integration (Single Integration for All Routes)
  ApiGatewayIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt CRUDLambdaFunction.Arn
      PayloadFormatVersion: '2.0'

  # âœ… Permission for API Gateway to invoke Lambda (API Gateway added as trigger)
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CRUDLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*"

Outputs:
  ApiEndpoint:
    Description: "API Gateway Endpoint URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com"
