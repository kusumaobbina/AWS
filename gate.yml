AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for S3 static website hosting with API Gateway integration'

Resources:

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "my-web-hosting-${AWS::AccountId}"
      WebsiteConfiguration:
        IndexDocument: index.html


  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${WebsiteBucket}/*"


  WebsiteBucketCORS:
    Type: AWS::S3::BucketCorsConfiguration
    Properties:
      Bucket: !Ref WebsiteBucket
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - GET
            AllowedHeaders:
              - "*"


  WebsiteIndexHTML:
    Type: AWS::S3::Object
    Properties:
      Bucket: !Ref WebsiteBucket
      Key: "index.html"
      ContentType: "text/html"
      PublicRead: true
      Content: 
        !Sub |
          <!DOCTYPE html>
          <html>
          <head>
              <title>API Data Viewer</title>
              <script>
                  async function fetchData() {
                      const response = await fetch('${ApiGatewayUrl}');
                      const data = await response.json();
                      const list = document.getElementById('items-list');
                      list.innerHTML = '';
                      data.forEach(item => {
                          let li = document.createElement('li');
                          li.textContent = `${item.id}: ${item.name}`;
                          list.appendChild(li);
                      });
                  }
                  fetchData();
              </script>
          </head>
          <body>
              <h1>Items List</h1>
              <ul id="items-list"></ul>
          </body>
          </html>

  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: MyHTTPAPI
      ProtocolType: HTTP


  ApiGatewayStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGateway
      StageName: "$default"
      AutoDeploy: true


  ApiGatewayRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'GET /items'
      Target: !Sub 'integrations/${ApiGatewayIntegration}'


  ApiGatewayIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CRUDLambdaFunction.Arn}/invocations"
      PayloadFormatVersion: '2.0'


  CRUDLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CRUDHandlerFunction
      Handler: index.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table(os.environ['TABLE_NAME'])

          def lambda_handler(event, context):
              try:
                  response = table.scan()
                  items = response.get('Items', [])
                  return {'statusCode': 200, 'body': json.dumps(items)}
              except Exception as e:
                  return {'statusCode': 500, 'body': json.dumps({'error': str(e)})}

      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTable

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                Resource: "*"

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CRUDLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*"

Outputs:
  WebsiteURL:
    Description: "S3 Static Website URL"
    Value: !Sub "http://${WebsiteBucket}.s3-website-${AWS::Region}.amazonaws.com"

  ApiGatewayUrl:
    Description: "API Gateway Endpoint"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/items"
